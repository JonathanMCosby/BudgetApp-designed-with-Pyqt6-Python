# Form implementation generated from reading ui file '/Users/benjicosby/Desktop/improveBudgetApp/budgetWindow.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import mysql.connector
import sys
from PyQt6 import QtCore, QtGui, QtWidgets
from mysql.connector import errorcode
from datetime import *
from displayWindow_ui import Ui_displayWindow
from deletedEntryWindow_ui import Ui_MainWindow
from invalidWindow_ui import Ui_invalidWindow

class Ui_budgetWindow(object):
    def setupUi(self, budgetWindow):
        budgetWindow.setObjectName("budgetWindow")
        budgetWindow.resize(680, 618)
        budgetWindow.setStyleSheet("background-color: qlineargradient(spread:pad, x1:1, y1:1, x2:1, y2:0, stop:0.311828 rgba(118, 255, 163, 252), stop:0.688172 rgba(65, 183, 60, 255));")
        self.centralwidget = QtWidgets.QWidget(parent=budgetWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(520, 10, 161, 16))
        self.label.setStyleSheet("background-color: none;\n"
"color: rgb(255,255,255);")
        self.label.setObjectName("label")
        self.titleLbl = QtWidgets.QLabel(parent=self.centralwidget)
        self.titleLbl.setGeometry(QtCore.QRect(180, 50, 341, 61))
        self.titleLbl.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.titleLbl.setStyleSheet("background-color: rgb(118,255,163) ;\n"
"font-size: 32px;\n"
"font: italic bold;\n"
"color: rgb(65,183,60);\n"
"padding-left: 15px;\n"
"padding-right: 15px;\n"
"border-radius: 25px")
        self.titleLbl.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.titleLbl.setObjectName("titleLbl")
        self.primaryIncomeLine = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.primaryIncomeLine.setGeometry(QtCore.QRect(320, 240, 281, 61))
        self.primaryIncomeLine.setStyleSheet("background-color: rgb(255,255,255);\n"
"border-radius: 25px;\n"
"color: rgb(0,0,0);\n"
"font-size: 20px;\n"
"font: italic bold;")
        self.primaryIncomeLine.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.primaryIncomeLine.setObjectName("primaryIncomeLine")
        self.primaryIncomeLbl = QtWidgets.QLabel(parent=self.centralwidget)
        self.primaryIncomeLbl.setGeometry(QtCore.QRect(80, 240, 211, 61))
        self.primaryIncomeLbl.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.primaryIncomeLbl.setStyleSheet("background-color: rgb(118,255,163);\n"
"font-size: 24px;\n"
"font: italic bold;\n"
"color: rgb(65,183,60);\n"
"padding-left: 15px;\n"
"padding-right: 15px;\n"
"border-radius: 25px;")
        self.primaryIncomeLbl.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.primaryIncomeLbl.setObjectName("primaryIncomeLbl")
        self.sideIncomeLbl = QtWidgets.QLabel(parent=self.centralwidget)
        self.sideIncomeLbl.setGeometry(QtCore.QRect(80, 330, 211, 61))
        self.sideIncomeLbl.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.sideIncomeLbl.setStyleSheet("background-color: rgb(118,255,163);\n"
"font-size: 24px;\n"
"font: italic bold;\n"
"color: rgb(65,183,60);\n"
"padding-left: 15px;\n"
"padding-right: 15px;\n"
"border-radius: 25px;")
        self.sideIncomeLbl.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.sideIncomeLbl.setObjectName("sideIncomeLbl")
        self.sideIncomeLine = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.sideIncomeLine.setGeometry(QtCore.QRect(320, 330, 281, 61))
        self.sideIncomeLine.setStyleSheet("background-color: rgb(255,255,255);\n"
"border-radius: 25px;\n"
"color: rgb(0,0,0);\n"
"font-size: 20px;\n"
"font: italic bold;")
        self.sideIncomeLine.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.sideIncomeLine.setObjectName("sideIncomeLine")
        self.addBtn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.addBtn.setGeometry(QtCore.QRect(90, 440, 121, 51))
        self.addBtn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.addBtn.setAutoFillBackground(False)
        self.addBtn.setStyleSheet("background-color: rgb(65,183,60);\n"
"font: italic bold;\n"
"color: rgb(118,255,163);\n"
"font-size: 20px;\n"
"border-radius: 15px;\n"
"")
        self.addBtn.setAutoDefault(True)
        self.addBtn.setDefault(True)
        self.addBtn.setObjectName("addBtn")
        self.deleteBtn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.deleteBtn.setGeometry(QtCore.QRect(290, 440, 121, 51))
        self.deleteBtn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.deleteBtn.setAutoFillBackground(False)
        self.deleteBtn.setStyleSheet("background-color: rgb(65,183,60);\n"
"font: italic bold;\n"
"color: rgb(118,255,163);\n"
"font-size: 20px;\n"
"border-radius: 15px;\n"
"")
        self.deleteBtn.setAutoDefault(True)
        self.deleteBtn.setDefault(True)
        self.deleteBtn.setObjectName("deleteBtn")
        self.backBtn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.backBtn.setGeometry(QtCore.QRect(490, 440, 121, 51))
        self.backBtn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.backBtn.setAutoFillBackground(False)
        self.backBtn.setStyleSheet("background-color: rgb(65,183,60);\n"
"font: italic bold;\n"
"color: rgb(118,255,163);\n"
"font-size: 20px;\n"
"border-radius: 15px;\n"
"")
        self.backBtn.setAutoDefault(True)
        self.backBtn.setDefault(True)
        self.backBtn.setObjectName("backBtn")
        self.lastEntryDateLbl = QtWidgets.QLabel(parent=self.centralwidget)
        self.lastEntryDateLbl.setGeometry(QtCore.QRect(100, 130, 501, 41))
        self.lastEntryDateLbl.setStyleSheet("background-color: rgb(255,255,255);\n"
"font: italic bold;\n"
"font-size: 15px;\n"
"color: rgb(0,0,0);\n"
"padding-left: 10px;\n"
"border-radius: 15px;")
        self.lastEntryDateLbl.setObjectName("lastEntryDateLbl")
        self.lastIncomeLbl = QtWidgets.QLabel(parent=self.centralwidget)
        self.lastIncomeLbl.setGeometry(QtCore.QRect(100, 180, 501, 41))
        self.lastIncomeLbl.setStyleSheet("background-color: rgb(255,255,255);\n"
"font: italic bold;\n"
"font-size: 15px;\n"
"color: rgb(0,0,0);\n"
"padding-left: 10px;\n"
"border-radius: 15px;")
        self.lastIncomeLbl.setObjectName("lastIncomeLbl")
        budgetWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=budgetWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 680, 21))
        self.menubar.setObjectName("menubar")
        budgetWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=budgetWindow)
        self.statusbar.setObjectName("statusbar")
        budgetWindow.setStatusBar(self.statusbar)

        self.retranslateUi(budgetWindow)
        QtCore.QMetaObject.connectSlotsByName(budgetWindow)

    def retranslateUi(self, budgetWindow):
        _translate = QtCore.QCoreApplication.translate
        budgetWindow.setWindowTitle(_translate("budgetWindow", "MainWindow"))
        self.label.setText(_translate("budgetWindow", "Made By: Jonathan Cosby"))
        self.titleLbl.setText(_translate("budgetWindow", ""))
        self.primaryIncomeLine.setPlaceholderText(_translate("budgetWindow", "Primary Income"))
        self.primaryIncomeLbl.setText(_translate("budgetWindow", "Primary Income"))
        self.sideIncomeLbl.setText(_translate("budgetWindow", "Side Income"))
        self.sideIncomeLine.setPlaceholderText(_translate("budgetWindow", "Side Income"))
        self.addBtn.setText(_translate("budgetWindow", "Add"))
        self.deleteBtn.setText(_translate("budgetWindow", "Delete"))
        self.backBtn.setText(_translate("budgetWindow", "Back"))
        self.lastEntryDateLbl.setText(_translate("budgetWindow", "Last Entry Date: "))
        self.lastIncomeLbl.setText(_translate("budgetWindow", "Last Total Income: "))
        self.backBtn.clicked.connect(lambda:self.back(budgetWindow))
        self.addBtn.clicked.connect(self.add)
        self.deleteBtn.clicked.connect(self.delete)
        
    def back(self, budgetWindow):
        budgetWindow.hide()

    def add(self):
        try:
            my_connection = mysql.connector.connect(
                user = "root",
                password = "Kteasley",
                host = "localhost",
                database = "budgetProgram"
    )
        except mysql.connector.Error as err:
            if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
                print("Invaild credentials")
                if err.errno == errorcode.ER_BAD_DB_ERROR:
                    print("No database available")
                else:
                    print("Error occured", err)
        else:
            print('Connection Successful')
            user_cursor = my_connection.cursor()
            table_cursor = my_connection.cursor()
            
            userNameLine = self.titleLbl.text()
            print(userNameLine)
            query = "SELECT * FROM user WHERE user_name = %s"
            user_cursor.execute(query, (userNameLine,))
            result = user_cursor.fetchone()
            print(result)

            primaryIncome = float(self.primaryIncomeLine.text())
            sideIncome = float(self.sideIncomeLine.text())
            total = primaryIncome + sideIncome
            needs = total * 0.5
            wants = total * 0.3
            save = total * 0.2
            dateDisplay = datetime.now()
            
            query = "INSERT INTO budgetProgram.table (user_name, primary_income, side_income, total_income, needs, wants, save, date) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)"
            table_cursor.execute(query,(userNameLine, primaryIncome, sideIncome, total, needs, wants, save, dateDisplay))

            my_connection.commit()
            my_connection.close()

            self.displayWindow = QtWidgets.QMainWindow()
            self.displayUi = Ui_displayWindow()
            self.displayUi.setupUi(self.displayWindow)
            self.displayWindow.show()
            self.displayUi.primaryDisplay.setText(str(round(primaryIncome,2)))
            self.displayUi.sideDisplay.setText(str(round(sideIncome,2)))
            self.displayUi.totalDisplay.setText(str(round(total,2)))
            self.displayUi.saveDisplay.setText(str(round(save,2)))
            self.displayUi.needsDisplay.setText(str(round(needs,2)))
            self.displayUi.wantsDisplay.setText(str(round(wants,2)))

    def delete(self):
        try:
            my_connection = mysql.connector.connect(
                user = "root",
                password = "Kteasley",
                host = "localhost",
                database = "budgetProgram"
    )
        except mysql.connector.Error as err:
            if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
                print("Invaild credentials")
                if err.errno == errorcode.ER_BAD_DB_ERROR:
                    print("No database available")
                else:
                    print("Error occured", err)
        else:
            print('Connection Successful')
            table_cursor = my_connection.cursor()
            userNameLine = self.titleLbl.text()

            query = "SELECT entry_id FROM budgetProgram.table WHERE user_name = %s ORDER BY date DESC LIMIT 1; "
            table_cursor.execute(query, [userNameLine])
            entryId = table_cursor.fetchone()
            if entryId:
                query = "DELETE FROM budgetProgram.table WHERE entry_id = %s; "
                deleteEntryId = entryId[0]
                table_cursor.execute(query, [deleteEntryId])
                my_connection.commit()
                my_connection.close()
                self.deleteWindow = QtWidgets.QMainWindow()
                self.deleteUi = Ui_MainWindow()
                self.deleteUi.setupUi(self.deleteWindow)
                self.deleteWindow.show()

            else:
                self.invalidWindow = QtWidgets.QMainWindow()
                self.invalidUi = Ui_invalidWindow()
                self.invalidUi.setupUi(self.invalidWindow)
                self.invalidWindow.show()